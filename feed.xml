<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://mo-shakib.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://mo-shakib.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-06T17:58:43+00:00</updated><id>https://mo-shakib.github.io/feed.xml</id><title type="html">blank</title><subtitle>Mohammad Shakib aka Mo-Shakib&apos;s portfolio: CS grad showcasing skills, projects, and tech blogs. LeetCode solutions, DSA, programming, and problem-solving content. </subtitle><entry><title type="html">How to Install and Use pyenv on macOS</title><link href="https://mo-shakib.github.io/blog/2024/how-to-install-and-use-pyenv-on-macOS/" rel="alternate" type="text/html" title="How to Install and Use pyenv on macOS"/><published>2024-11-06T00:19:00+00:00</published><updated>2024-11-06T00:19:00+00:00</updated><id>https://mo-shakib.github.io/blog/2024/how-to-install-and-use-pyenv-on-macOS</id><content type="html" xml:base="https://mo-shakib.github.io/blog/2024/how-to-install-and-use-pyenv-on-macOS/"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/post_images/pyenv-480.webp 480w,/assets/img/post_images/pyenv-800.webp 800w,/assets/img/post_images/pyenv-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/post_images/pyenv.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Managing multiple Python versions on your MacOS can be challenging. <code class="language-plaintext highlighter-rouge">pyenv</code> - a fantastic tool that lets you switch between Python versions seamlessly. In this guide, I‚Äôll walk you through installing and using pyenv on macOS.</p> <h4 id="what-is-pyenv">What is <a href="https://github.com/pyenv/pyenv">pyenv</a>?</h4> <p><a href="https://github.com/pyenv/pyenv">pyenv</a> is a Python version management tool that allows you to:</p> <ul> <li>Install multiple Python versions</li> <li>Switch between them easily</li> <li>Set global and project-specific Python versions</li> <li>Manage virtual environments</li> </ul> <h4 id="prerequisites">Prerequisites</h4> <p>Before we begin, make sure you have:</p> <ul> <li>macOS</li> <li>Homebrew package manager</li> <li>Terminal access</li> </ul> <h4 id="installation-steps">Installation Steps</h4> <h4 id="1-install-required-dependencies">1. Install Required Dependencies</h4> <p>First, install the required dependencies using Homebrew:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>openssl readline sqlite3 xz zlib
</code></pre></div></div> <h4 id="2-install-pyenv">2. Install pyenv</h4> <p>Install pyenv using Homebrew:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>pyenv
</code></pre></div></div> <h5 id="3-configure-your-shell">3. Configure Your Shell</h5> <p>Add pyenv to your shell configuration. If you‚Äôre using zsh (default in modern macOS), add these lines to your <code class="language-plaintext highlighter-rouge">~/.zshrc</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'export PYENV_ROOT="$HOME/.pyenv"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="nb">echo</span> <span class="s1">'command -v pyenv &gt;/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="nb">echo</span> <span class="s1">'eval "$(pyenv init -)"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div> <p>If you‚Äôre using bash, add the same lines to <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> or <code class="language-plaintext highlighter-rouge">~/.bashrc</code>.</p> <p>Restart your terminal or reload your shell configuration:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.zshrc  <span class="c"># or source ~/.bash_profile for bash</span>
</code></pre></div></div> <h4 id="using-pyenv">Using pyenv</h4> <h5 id="list-available-python-versions">List Available Python Versions</h5> <p>To see all available Python versions:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv <span class="nb">install</span> <span class="nt">--list</span>
</code></pre></div></div> <h4 id="install-a-python-version">Install a Python Version</h4> <p>To install a specific Python version:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv <span class="nb">install </span>3.9.7
</code></pre></div></div> <h5 id="list-installed-versions">List Installed Versions</h5> <p>View your installed Python versions:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv versions
</code></pre></div></div> <h5 id="set-global-python-version">Set Global Python Version</h5> <p>Set a default Python version for your system:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv global 3.9.7
</code></pre></div></div> <h5 id="set-local-python-version">Set Local Python Version</h5> <p>Set a Python version for a specific project directory:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>your-project
pyenv <span class="nb">local </span>3.8.12
</code></pre></div></div> <h5 id="check-current-python-version">Check Current Python Version</h5> <p>Verify your active Python version:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">--version</span>
pyenv version
</code></pre></div></div> <h4 id="working-with-virtual-environments">Working with Virtual Environments</h4> <p>pyenv works great with virtual environments. Here‚Äôs how to use them:</p> <h5 id="install-pyenv-virtualenv">Install pyenv-virtualenv</h5> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>pyenv-virtualenv
</code></pre></div></div> <p>Add to your shell configuration:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'eval "$(pyenv virtualenv-init -)"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div> <h5 id="create-a-virtual-environment">Create a Virtual Environment</h5> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv virtualenv 3.9.7 my-project-env
</code></pre></div></div> <h5 id="activatedeactivate-environment">Activate/Deactivate Environment</h5> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Activate</span>
pyenv activate my-project-env
<span class="c"># Deactivate</span>
pyenv deactivate
</code></pre></div></div> <h4 id="common-issues-and-solutions">Common Issues and Solutions</h4> <h5 id="1-python-build-fails">1. Python Build Fails</h5> <p>If you encounter build failures, ensure you have all required dependencies:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>openssl readline sqlite3 xz zlib
</code></pre></div></div> <h5 id="2-command-not-found">2. Command Not Found</h5> <p>If pyenv commands aren‚Äôt recognized, verify your shell configuration and restart your terminal.</p> <h3 id="best-practices">Best Practices</h3> <ol> <li>Always use virtual environments for projects</li> <li>Keep your pyenv installation updated</li> <li>Document Python versions in your projects</li> <li>Use <code class="language-plaintext highlighter-rouge">.python-version</code> files for project-specific versions</li> </ol> <h3 id="conclusion">Conclusion</h3> <p>pyenv is an invaluable tool for Python development on macOS. It simplifies version management and helps maintain clean, isolated development environments. With this setup, you can easily switch between Python versions and manage project-specific environments.</p> <p>Remember to periodically update pyenv and your Python versions to ensure you have the latest features and security updates.</p> <p>Happy coding! üêç‚ú®</p> <hr/> <p><em>This guide was last updated: 06 November, 2024</em></p>]]></content><author><name></name></author><category term="coding-tool"/><category term="python"/><category term="pyenv"/><category term="coding"/><category term="macOS"/><summary type="html"><![CDATA[Managing multiple Python versions on your Mac can be challenging. pyenv is a fantastic tool that lets you switch between Python versions seamlessly.]]></summary></entry><entry><title type="html">Top K Frequent Elements python solution</title><link href="https://mo-shakib.github.io/blog/2024/top-k-frequent-elements/" rel="alternate" type="text/html" title="Top K Frequent Elements python solution"/><published>2024-11-01T00:09:00+00:00</published><updated>2024-11-01T00:09:00+00:00</updated><id>https://mo-shakib.github.io/blog/2024/top-k-frequent-elements</id><content type="html" xml:base="https://mo-shakib.github.io/blog/2024/top-k-frequent-elements/"><![CDATA[<h1 id="top-k-frequent-elements">Top K Frequent Elements</h1> <p><strong>URL</strong>: <a href="https://leetcode.com/problems/top-k-frequent-elements/description/">https://leetcode.com/problems/top-k-frequent-elements/description/</a></p> <h4 id="problem-overview">Problem Overview</h4> <p>The problem requires us to find the <code class="language-plaintext highlighter-rouge">k</code> most frequent elements in an integer array <code class="language-plaintext highlighter-rouge">nums</code>. We can return the result in any order.</p> <p>Approach to Solve the Problem</p> <p>To solve this problem, we need to:</p> <ol> <li>Count the Frequency: Identify how often each element appears in nums.</li> <li>Sort by Frequency: Sort the elements by their frequency in descending order.</li> <li>Return Top k Elements: Select the first k elements from the sorted list of elements.</li> </ol> <h4 id="step-by-step-solution-explanation">Step-by-Step Solution Explanation</h4> <p>Here‚Äôs a step-by-step breakdown of the solution:</p> <ol> <li>Create a Frequency Dictionary: <ul> <li>Use a dictionary my_dict to store each unique element in nums as a key, with its frequency (i.e., number of occurrences) as the value.</li> <li>Loop through each element i in nums.</li> <li>If i is already in my_dict, increment its count by 1.</li> <li>If i is not in my_dict, add it with an initial count of 1.</li> </ul> </li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">my_dict</span><span class="p">:</span>
        <span class="n">my_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">my_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <ol> <li>Sort Elements by Frequency: <ul> <li>After building my_dict, we need to sort its keys based on their values (frequencies) in descending order.</li> <li>Use sorted() with a lambda function key=lambda x: my_dict[x] to sort by frequency. Set reverse=True to get a descending order.</li> <li>Store the sorted keys in sorted_keys.</li> </ul> </li> </ol> <p><code class="language-plaintext highlighter-rouge">sorted_keys = sorted(my_dict, key=lambda x: my_dict[x], reverse=True)</code></p> <ol> <li>Return the Top k Elements: <ul> <li>Use slicing to return the first k elements in sorted_keys.</li> </ul> </li> </ol> <p><code class="language-plaintext highlighter-rouge">return sorted_keys[:k]</code></p> <h4 id="full-solution-code">Full Solution Code</h4> <p>Here‚Äôs the complete code in Python:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">topKFrequent</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">my_dict</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1"># Step 1: Count the frequency of each element
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">my_dict</span><span class="p">:</span>
                <span class="n">my_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">my_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="c1"># Step 2: Sort elements by frequency in descending order
</span>        <span class="n">sorted_keys</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">my_dict</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">my_dict</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

        <span class="c1"># Step 3: Return the top k frequent elements
</span>        <span class="k">return</span> <span class="n">sorted_keys</span><span class="p">[:</span><span class="n">k</span><span class="p">]</span>
</code></pre></div></div> <p><strong>Example Walkthrough</strong></p> <p>Let‚Äôs go through a example provided:</p> <ul> <li>Input: <code class="language-plaintext highlighter-rouge">nums = [1,1,1,2,2,3]</code>, <code class="language-plaintext highlighter-rouge">k = 2</code></li> <li>Process:</li> <li>Frequency <code class="language-plaintext highlighter-rouge">dictionary: {1: 3, 2: 2, 3: 1}</code></li> <li>Sorted by <code class="language-plaintext highlighter-rouge">frequency: [1, 2, 3]</code></li> <li>Return the first 2 <code class="language-plaintext highlighter-rouge">elements: [1, 2]</code></li> <li>Output: <code class="language-plaintext highlighter-rouge">[1, 2]</code></li> </ul> <h5 id="complexity-analysis">Complexity Analysis</h5> <ul> <li>Time Complexity: O(N log N), where N is the length of nums. This is because we iterate over nums to count the frequencies and then sort the dictionary keys.</li> <li>Space Complexity: O(N), for storing the dictionary and the sorted list.</li> </ul> <p>This solution is efficient for large inputs, as N can be up to Ôøº according to the constraints.</p> <h5 id="extra-">Extra-</h5> <p>Get all my <a href="https://leetcode.com/">LeetCode</a> solutions from this repo: <a href="https://github.com/Mo-Shakib/LeetCode">LeetCode</a> üßëüèª‚Äçüíª</p> <p><img src="/assets/img/thumbnails/leetcode-top-k.JPG" alt="LeetCode" height="400px"/></p>]]></content><author><name></name></author><category term="leetcode"/><category term="leetcode"/><category term="code"/><category term="hash-table"/><summary type="html"><![CDATA[Python solution for Leetcode problem, easy to understand for beginners.]]></summary></entry><entry><title type="html">Graduated from BRAC University</title><link href="https://mo-shakib.github.io/blog/2024/graduated-from-brac-university/" rel="alternate" type="text/html" title="Graduated from BRAC University"/><published>2024-10-31T15:40:16+00:00</published><updated>2024-10-31T15:40:16+00:00</updated><id>https://mo-shakib.github.io/blog/2024/graduated-from-brac-university</id><content type="html" xml:base="https://mo-shakib.github.io/blog/2024/graduated-from-brac-university/"><![CDATA[<p>I‚Äôm finally done with my undergrad journey! I feel both super proud and incredibly grateful for everyone who helped me get here. This whole experience has been a rollercoaster of challenges, new experiences, and memories that I‚Äôll cherish forever. Looking back, it feels like just yesterday when I packed my bags and left home for Dhaka. That first day in the hostel, I was totally lost and alone. First and foremost, I‚Äôm greatfull to almighty and I want to thank my parents, they‚Äôve been my biggest supporters, making sure I had everything I needed to succeed. Your unwavering love and encouragement got me through the tough times and kept me going even when things got rough. And I want to thank myself for not giving up, for handling each challenge with grace, and for always trying my best, even when the path seemed overwhelming. To everyone who helped me along the way, whether it was with advice, friendship, or just being there to listen, I‚Äôm so thankful. A big shoutout to my classmates and friends, who made this journey so much fun. I‚Äôll miss our late-night study sessions, coffee and tea breaks after class, and lunches shared between it all. Those moments made it all so much more than just about grades and assignments. Living in a hostel and later living alone was a huge adjustment. The food wasn‚Äôt what I was used to, and I spent more days eating outside than I‚Äôd like to admit. But eventually, I learned to cook out of necessity, and today, I can proudly say I‚Äôm a decent cook! Though the journey wasn‚Äôt easy, and I faced a lot of ups and downs, I‚Äôm so proud to be moving forward, ready for the next chapter of my life.</p> <p><strong>I‚Äôm grateful for everything I‚Äôve learned and everyone who‚Äôs been a part of this incredible chapter üå±</strong></p>]]></content><author><name></name></author><category term="life-updates"/><category term="graduation"/><category term="gratitude"/><category term="personal-growth"/><category term="university-life"/><category term="memories"/><summary type="html"><![CDATA[Reflecting on my unforgettable undergraduate journey and the people who made it possible]]></summary></entry><entry><title type="html">Is Subsequence python solution</title><link href="https://mo-shakib.github.io/blog/2024/is-subsequence/" rel="alternate" type="text/html" title="Is Subsequence python solution"/><published>2024-10-26T01:04:00+00:00</published><updated>2024-10-26T01:04:00+00:00</updated><id>https://mo-shakib.github.io/blog/2024/is-subsequence</id><content type="html" xml:base="https://mo-shakib.github.io/blog/2024/is-subsequence/"><![CDATA[<h3 id="392-is-subsequence">392. Is Subsequence</h3> <p>URL: <a href="https://leetcode.com/problems/is-subsequence/">https://leetcode.com/problems/is-subsequence/</a></p> <h4 id="problem-overview">Problem Overview</h4> <p>The problem asks us to check if string <code class="language-plaintext highlighter-rouge">s</code> is a subsequence of string <code class="language-plaintext highlighter-rouge">t</code>. A subsequence means we should be able to find all characters of s within t while maintaining their original order.</p> <h5 id="approach-to-solve-the-problem">Approach to Solve the Problem</h5> <p>The solution involves the following steps:</p> <ol> <li>Initialize Pointers: Create pointers for both strings <code class="language-plaintext highlighter-rouge">s</code> and <code class="language-plaintext highlighter-rouge">t</code>.</li> <li>Traverse t: Use the pointer for t to iterate through each character.</li> <li>Match Characters: For each character in <code class="language-plaintext highlighter-rouge">t</code>, check if it matches the current character in s.</li> <li>Advance Pointer for <code class="language-plaintext highlighter-rouge">s</code>: If there‚Äôs a match, move the pointer for s to the next character.</li> <li>Return Result: If the pointer for s reaches the end of <code class="language-plaintext highlighter-rouge">s</code>, it means all characters were found in order, so <code class="language-plaintext highlighter-rouge">return True</code>. If we finish t without matching all characters of <code class="language-plaintext highlighter-rouge">s</code>, <code class="language-plaintext highlighter-rouge">return False</code>.</li> </ol> <p>This approach is efficient as it traverses each string only once.</p> <p>Step-by-Step Solution Explanation</p> <ol> <li> <p>Initialize Pointers</p> <p>‚Ä¢ Set a found counter to track matched characters in <code class="language-plaintext highlighter-rouge">s</code>. ‚Ä¢ Initialize a pointer <code class="language-plaintext highlighter-rouge">x</code> for <code class="language-plaintext highlighter-rouge">t</code>.</p> </li> <li> <p>Traverse <code class="language-plaintext highlighter-rouge">t</code> to Match Characters</p> <p>‚Ä¢ For each character <code class="language-plaintext highlighter-rouge">i</code> in <code class="language-plaintext highlighter-rouge">s</code>, use a loop to find <code class="language-plaintext highlighter-rouge">i</code> in <code class="language-plaintext highlighter-rouge">t</code>. ‚Ä¢ Move <code class="language-plaintext highlighter-rouge">x</code> through t until <code class="language-plaintext highlighter-rouge">t[x]</code> matches <code class="language-plaintext highlighter-rouge">i</code> or the end of <code class="language-plaintext highlighter-rouge">t</code> is reached.</p> </li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
    <span class="k">while</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="ow">and</span> <span class="n">t</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
        <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <ol> <li> <p>Track Matches</p> <ul> <li>If i is found in t (i.e., <code class="language-plaintext highlighter-rouge">x</code> is within bounds), increment both found and <code class="language-plaintext highlighter-rouge">x</code>.</li> <li>If not found, break the loop asc<code class="language-plaintext highlighter-rouge">s</code> is not a subsequence of <code class="language-plaintext highlighter-rouge">t</code>.</li> </ul> </li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">t</span><span class="p">):</span> 
        <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span> 
        <span class="n">found</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">break</span>
</code></pre></div></div> <ol> <li> <p>Check If All Characters Were Found</p> <ul> <li>After looping, check if found equals the length of s to determine if s is a subsequence of t.</li> </ul> </li> </ol> <p><code class="language-plaintext highlighter-rouge">return found == len(s)</code></p> <p>Full Solution Code:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isSubsequence</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">found</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="ow">and</span> <span class="n">t</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
                <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>  
            <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">t</span><span class="p">):</span> 
                <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span> 
                <span class="n">found</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">break</span>  
        <span class="k">return</span> <span class="n">found</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div> <p>Example Walkthrough:</p> <ul> <li>Input: s = ‚Äúabc‚Äù, t = ‚Äúahbgdc‚Äù</li> <li>Process:</li> <li>t is traversed, and s characters are found in the correct order.</li> <li>s characters (‚Äòa‚Äô, ‚Äòb‚Äô, ‚Äòc‚Äô) match in sequence within t.</li> <li>Output: True</li> </ul> <p>Complexity Analysis: - Time Complexity: O(n), where n is the length of t, as t is traversed at most once. - Space Complexity: O(1), because we use a constant amount of space for pointers.</p> <p>This approach is optimal for checking subsequences in large strings due to its linear time complexity.</p> <p>üí°<strong>Extra</strong>: Get all my <a href="https://leetcode.com/">LeetCode</a> solutions from this repo: <a href="https://github.com/Mo-Shakib/LeetCode">LeetCode</a> üßëüèª‚Äçüíª</p>]]></content><author><name></name></author><category term="leetcode"/><category term="leetcode"/><category term="code"/><category term="python"/><summary type="html"><![CDATA[Python solution for Leetcode problem, easy to understand for beginners.]]></summary></entry></feed>